# REPLACED BY POINTERS LIB

# # SPDX-License-Identifier: AGPL-3.0-only
# defmodule CommonsPub.Meta.Pointer do
#   @moduledoc """
#   The Pointer is a reference to an entry in any table participating in
#   the Meta abstraction. It enforces referential integrity by requiring
#   the primary keys of all such tables to be foreign keys for entries
#   in this table, having the side effect of enforcing UUID uniqueness.
#   This uniqueness is not a problem for us since they are all version 4
#   (random) UUIDs generated by us.
#   """

#   use CommonsPub.Common.Schema
#   alias Ecto.Changeset
#   alias CommonsPub.Meta.{Pointer, Table}

#   table_schema "mn_pointer" do
#     belongs_to(:table, Table)
#     field(:pointed, :any, virtual: true)
#   end

#   @spec changeset(binary()) :: Changeset.t()
#   def changeset(table_id) when is_binary(table_id) do
#     %Pointer{}
#     |> Changeset.change(table_id: table_id)
#     |> Changeset.foreign_key_constraint(:table_id)
#   end
# end
